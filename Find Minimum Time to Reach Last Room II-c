#include <vector>
#include <queue>
#include <limits>
#include <algorithm>

using namespace std;

class Solution {
public:
    int minTimeToReach(vector<vector<int>>& travelTime) {
        int rows = travelTime.size();
        int cols = travelTime[0].size();

        vector<vector<vector<int>>> minTime(rows, vector<vector<int>>(cols, vector<int>(2, INT_MAX)));
        minTime[0][0][0] = 0;

        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> minHeap;
        minHeap.push({0, 0, 0, 0});

        vector<pair<int, int>> moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while (!minHeap.empty()) {
            vector<int> current = minHeap.top();
            minHeap.pop();

            int currentTime = current[0];
            int x = current[1];
            int y = current[2];
            int toggle = current[3];

            if (currentTime > minTime[x][y][toggle]) continue;

            for (auto move : moves) {
                int newX = x + move.first;
                int newY = y + move.second;

                if (newX >= 0 && newX < rows && newY >= 0 && newY < cols) {
                    int newTime = max(currentTime, travelTime[newX][newY]) + (toggle == 0 ? 1 : 2);
                    if (newTime < minTime[newX][newY][1 - toggle]) {
                        minTime[newX][newY][1 - toggle] = newTime;
                        minHeap.push({newTime, newX, newY, 1 - toggle});
                    }
                }
            }
        }

        return min(minTime[rows - 1][cols - 1][0], minTime[rows - 1][cols - 1][1]);
    }
};
