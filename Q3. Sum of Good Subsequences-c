#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int sumOfGoodSubsequences(vector<int>& nums) {
        const int MOD = 1e9 + 7;
        long long result = 0;
        vector<long long> count(100001, 0);
        vector<long long> sum_of_subsequences(100001, 0);
        
        for (auto current_num : nums) {
            long long current_count = 1;
            long long current_sum = current_num;

            // Check if we can use the previous number for subsequence calculations
            if (current_num > 0) {
                current_count = (current_count + count[current_num - 1]) % MOD;
                current_sum = (current_sum + sum_of_subsequences[current_num - 1] + ((long long) count[current_num - 1] * current_num) % MOD) % MOD;
            }

            // Check if we can use the next number for subsequence calculations
            if (current_num < 100000) {
                current_count = (current_count + count[current_num + 1]) % MOD;
                current_sum = (current_sum + sum_of_subsequences[current_num + 1] + ((long long) count[current_num + 1] * current_num) % MOD) % MOD;
            }

            result = (result + current_sum) % MOD;
            count[current_num] = (count[current_num] + current_count) % MOD;
            sum_of_subsequences[current_num] = (sum_of_subsequences[current_num] + current_sum) % MOD;
        }

        return result;
    }
};
