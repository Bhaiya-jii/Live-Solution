#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxScore(int n, int k, vector<vector<int>>& stayScore, vector<vector<int>>& travelScore) {
        // Initialize a DP table with (k + 1) days and n cities, filled with 0
        vector<vector<int>> dp(k + 1, vector<int>(n, 0));

        // Iterate through each day up to k
        for (int day = 0; day < k; day++) {
            // Loop through each current city
            for (int curr = 0; curr < n; curr++) {
                // Calculate the score for staying in the current city
                dp[day + 1][curr] = max(dp[day + 1][curr], dp[day][curr] + stayScore[day][curr]);

                // Loop through all possible destination cities
                for (int dest = 0; dest < n; dest++) {
                    // Ensure we are not traveling to the same city
                    if (curr != dest) {
                        // Calculate the score for traveling to a different city
                        dp[day + 1][dest] = max(dp[day + 1][dest], dp[day][curr] + travelScore[curr][dest]);
                    }
                }
            }
        }

        // Find the maximum score achievable after k days by checking all cities
        int maxPoints = 0;
        for (int city = 0; city < n; city++) {
            maxPoints = max(maxPoints, dp[k][city]);
        }

        // Return the maximum points possible
        return maxPoints;
    }
};
