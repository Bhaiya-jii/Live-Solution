#include <vector>
#include <numeric> // For gcd
#include <algorithm> // For accumulate and max

class Solution {
public:
    long long maxScore(std::vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            // If there's only one element, LCM and GCD are the element itself
            return static_cast<long long>(nums[0]) * nums[0];
        }
        
        // Step 1: Compute the total GCD and LCM of the array
        int totalGCD = nums[0];
        long long totalLCM = nums[0];
        
        for (int i = 1; i < n; ++i) {
            totalGCD = std::gcd(totalGCD, nums[i]);
            totalLCM = (totalLCM * nums[i]) / std::gcd(totalLCM, static_cast<long long>(nums[i]));
        }
        
        // Initial factor score without removing any element
        long long maxFactorScore = totalGCD * totalLCM;

        // Step 2: Try removing each element and compute the GCD and LCM of the remaining elements
        for (int i = 0; i < n; ++i) {
            int gcdRemaining = 0;
            long long lcmRemaining = 1;

            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    gcdRemaining = gcdRemaining == 0 ? nums[j] : std::gcd(gcdRemaining, nums[j]);
                    lcmRemaining = (lcmRemaining * nums[j]) / std::gcd(lcmRemaining, static_cast<long long>(nums[j]));
                }
            }

            // Calculate factor score for this subset
            maxFactorScore = std::max(maxFactorScore, gcdRemaining * lcmRemaining);
        }

        return maxFactorScore;
    }
};
