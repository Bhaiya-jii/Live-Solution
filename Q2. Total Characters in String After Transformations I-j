class Solution {
    public int lengthAfterTransformations(String s, int t) {
        final int MOD = 1000000007;
        long[] count = new long[26];
        
        // Count the frequency of each character in the string
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }

        // Perform the transformations
        for (int i = 0; i < t; i++) {
            long[] newCount = new long[26];
            for (int j = 0; j < 26; j++) {
                if (j == 25) { // 'z' case
                    newCount[0] = (newCount[0] + count[j]) % MOD; // 'a' increases due to 'z'
                    newCount[1] = (newCount[1] + count[j]) % MOD; // 'b' increases due to 'z'
                } else {
                    newCount[j + 1] = (newCount[j + 1] + count[j]) % MOD; // Shift the rest of the alphabet
                }
            }
            count = newCount; // Update the count to the new counts after the transformation
        }

        // Calculate the final length
        long length = 0;
        for (long c : count) {
            length = (length + c) % MOD;
        }
        return (int) length; // Return the final length as an integer
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
    }
}
